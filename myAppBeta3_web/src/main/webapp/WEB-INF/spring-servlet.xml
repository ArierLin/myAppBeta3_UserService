<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd"
>

    <!-- 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射 <mvc:annotation-driven />
        会自动注册DefaultAnnotationHandlerMapping 与AnnotationMethodHandlerAdapter 两个bean,
        是springMVC为@Controllers分发请求所必须的。

        提供了一系列数据绑定，数字和日期的format，@NumberFormat,@DataTimeFormat,
            xml,json的默认支持
        -->
    <mvc:annotation-driven/>

    <!--
    使用<context:annotation- config/>隐式地向 Spring容器注册
    AutowiredAnnotationBeanPostProcessor、
    RequiredAnnotationBeanPostProcessor、
    CommonAnnotationBeanPostProcessor以及
    PersistenceAnnotationBeanPostProcessor
    这4个BeanPostProcessor
     -->
    <!-- 把标记了@Controller注解的类转换为bean
    该配置项其实也包含了自动注入上述processor的功能，
    因此当使用<context:component-scan/>后，即可将<context:annotation-config/>省去
    <context:annotation-config />
    -->
    <context:component-scan base-package="com.jr.controller"/>
    <!--启用切面-->
    <aop:aspectj-autoproxy expose-proxy="true" proxy-target-class="true"/>
    <!--
        静态资源默认servlet配置
        1.加入对静态资源的处理：js、gif等
        2.允许使用“/”做整体映射
     -->
    <mvc:default-servlet-handler></mvc:default-servlet-handler>
    <!-- 不拦截静态文件 -->
    <mvc:resources mapping="/js/**" location="/js/"/>
    <mvc:resources mapping="/css/**" location="/css/"/>
    <mvc:resources mapping="/fonts/**" location="/fonts/"/>
    <mvc:resources mapping="/images/**" location="/images/"/>
    <mvc:resources mapping="/assets/**" location="/assets/"/>

    <!-- 配置在spring环境下Shiro注解生效的两个bean，要求必须配置 lifecycleBeanPostProcessor
        实现
        1.shiro标签
        2.方法的权限控制
        需要将这两个配置放到springmvc的配置文件中
    -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true"/>
    </bean>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>


    <!-- 文件上传的Resolver -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="10000024621345"/>
    </bean>

    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
    <bean id="internalResourceViewResolver"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="suffix" value=".jsp"></property>
        <property name="prefix" value="/WEB-INF/jsp/"></property>
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.JstlView"/>
    </bean>


</beans>




